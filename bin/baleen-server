#!/usr/bin/env ruby

require "thor"
require "baleen"

def pid
  pid = `ps ax | grep -E "bin/baleen-server" | grep -v grep | awk '{print $1}'`
  pid.split("\n")
end

def running?
  if pid.size == 0
    false
  elsif pid.first.to_i == Process.pid
    false
  else
    true
  end
end


class BaleenServerCli < Thor

  include Baleen::Default

  desc "start", "Start Baleen server"
  option :docker_host,   :desc => "Host of Docker"
  option :docker_port,   :desc => "Port that Docker is listening to"
  option :port,          :desc => "Port that baleen server is listening to"
  option :debug,         :desc => "When specified, baleen-server prints out debug message to console"
  option :ci,            :desc => "When specified, baleen-server will receive github post-receive"
  option :ci_port,       :desc => "Port to accept github post-receive"
  option :config,        :desc => "Path to baleen.yml"
  option :dir,           :desc => "Specify the directory for baleen to save temp files, logs, caches, etc."
  def start
    if running?
      hl_error "baleen-server is already running"
      hl_error "Exiting..."
      exit
    end

    docker_host   = options[:docker_host]   || default_docker_host
    docker_port   = options[:docker_port]   || default_docker_port
    port          = options[:port]          || default_port
    dir           = options[:dir]           || default_dir
    config        = options[:config]        || default_config
    ci_port       = options[:ci_port]       || default_ci_port
    ci            = options[:ci]
    debug         = options[:debug]

    hl_info "Starting baleen-server..."
    hl_info "  Listening on: #{port}"
    hl_info "  Docker API: http://#{docker_host}:#{docker_port}"

    Process.daemon(true, debug)
    Baleen::Server.new(docker_host, docker_port, port, config, dir)
    Baleen::CiServer.run!(docker_host: docker_host, docker_port: docker_port, port: ci_port) if ci

    # Prevent main thread from exiting for Celluloid actors to continue running
    # See https://github.com/celluloid/celluloid/wiki/Frequently-Asked-Questions
    sleep
  end

  desc "stop", "Stop Baleen server"
  def stop
    if running?
      hl_warn "Stopping Baleen server..."
      `kill -9 #{pid.first}`
    else
      hl_warn "baleen-server is not running"
    end
  end

  desc "restart", "Restart Baleen server"
  def restart
    self.stop
    self.start
  end

end

BaleenServerCli.start
