#!/usr/bin/env ruby

require "thor"
require "baleen"

module BaleenCommandHelper
  def job_start(config)
    klass = config[:framework].to_s.capitalize
    task = Baleen::Task.const_get(klass).new(
      image: config[:image],
      work_dir: config[:work_dir],
      files: config[:files],
      before_command: config[:before_command],
      concurrency: config[:concurrency].to_i,
    )
    client  = Baleen::Client.new(config[:baleen_server], config[:port])
    job     = Baleen::Job.new(client, task)
    job.start
  end
end

class BaleenCommand < Thor

  include Baleen::Default
  include BaleenCommandHelper

  desc "default", "Running baleen job according to config file"
  option :config, :default => "#{ENV["HOME"]}/.baleen.yml"
  def default
    yaml = options[:config]

    unless File.exist?(yaml)
      colored_error "#{yaml} does not exist. Please make sure file path is correct"
      exit 1
    end

    cfg = Baleen::Serializable.symbolize_keys(YAML.load_file(yaml))

    if Baleen::Validator::Validator.check(cfg)
      cfg[:baleen_server]  ||= default_baleen_server
      cfg[:port]           ||= default_port
      cfg[:before_command] ||= default_before_command
      cfg[:concurrency]    ||= default_concurrency
      cfg[:work_dir]       ||= default_work_dir
      cfg[:image]

      case cfg[:framework]
        when "cucumber"
          cfg[:files] = cfg[:features] || default_features
        else
          raise "Passed unknown framework from config yml: #{cfg[:framework]}"
      end

      job_start(cfg)
    end
  end
  default_task :default

  desc "cucumber", "Running cucumber features"
  option :baleen_server
  option :port
  option :before_command
  option :concurrency
  option :work_dir
  option :features
  option :image, :required => true

  def cucumber
    cfg = {}
    cfg[:framework]      = "cucumber"
    cfg[:port]           = options[:port]           || default_port
    cfg[:baleen_server]  = options[:baleen_server]  || default_baleen_server
    cfg[:before_command] = options[:before_command] || default_before_command
    cfg[:concurrency]    = options[:concurrency]    || default_concurrency
    cfg[:files]          = options[:features]       || default_features
    cfg[:work_dir]       = options[:work_dir]       || default_work_dir
    cfg[:image]          = options[:image]

    job_start(cfg)
  end

end

BaleenCommand.start
