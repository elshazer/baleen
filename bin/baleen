#!/usr/bin/env ruby

require "thor"
require "baleen"

module BaleenCommandHelper
  def job_start(config)
    klass = config[:framework][:type].to_s.capitalize
    task = Baleen::Task.const_get(klass).new(
      image: config[:runner][:image],
      work_dir: config[:runner][:work_dir],
      files: config[:framework][:files],
      before_command: config[:runner][:before_command],
      concurrency: config[:runner][:concurrency].to_i,
    )
    client  = Baleen::Client.new(config[:base][:baleen_server], config[:base][:port])
    job     = Baleen::Job.new(client, task)
    job.start
  end
end

class BaleenCommand < Thor

  include Baleen::Default
  include BaleenCommandHelper

  desc "project", "Running baleen by specifying project"
  option :project
  def project
    task = Baleen::Task::Project.new(
      :project => options[:project]
    )
    client  = Baleen::Client.new("127.0.0.1", 5533)
    job     = Baleen::Job.new(client, task)
    job.start
  end

  desc "default", "Running baleen job according to config file"
  option :config, :default => "#{ENV["PWD"]}/baleen.yml"
  def default
    yaml = options[:config]

    unless File.exist?(yaml)
      colored_error "#{yaml} does not exist. Please make sure file path is correct"
      exit 1
    end

    cfg = Baleen::Serializable.symbolize_keys(YAML.load_file(yaml))

    if Baleen::Config::Validator.check(cfg)
      cfg[:base][:baleen_server]
      cfg[:base][:port]             ||= default_port
      cfg[:runner][:before_command] ||= default_before_command
      cfg[:runner][:concurrency]    ||= default_concurrency
      cfg[:runner][:work_dir]       ||= default_work_dir
      cfg[:runner][:image]

      case cfg[:framework][:type]
        when "cucumber"
          cfg[:framework][:files] = cfg[:framework][:features] || default_features
        else
          raise "Passed unknown framework from config yml: #{cfg[:framework][:type]}"
      end

      job_start(cfg)
    end
  end
  default_task :default

  desc "cucumber", "Running cucumber features"
  option :baleen_server, :required => true
  option :port
  option :before_command
  option :concurrency
  option :work_dir
  option :features
  option :image, :required => true

  def cucumber
    cfg = {
      base: {
        baleen_server: options[:baleen_server],
        port: options[:port]                    || default_port
      },
      runner: {
        before_command: options[:before_command] || default_before_command,
        concurrency: options[:concurrency]       || default_concurrency,
        work_dir: options[:work_dir]             || default_work_dir,
        image: options[:image],
      },
      framework: {
        files: options[:features] || default_features,
        type: "cucumber"
      }
    }

    job_start(cfg)
  end

end

BaleenCommand.start
